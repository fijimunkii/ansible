user  nginx;
worker_processes  1;


error_log  /var/log/nginx/nginx-error.log warn;
pid        /var/run/nginx.pid;


events {
  worker_connections  1024;
}


http {
  map $http $bare_host { ~/(\w+)\.[^.]*$/ $1; }
  server_tokens off;
  add_header X-Frame-Options SAMEORIGIN;
  add_header X-Content-Type-Options nosniff;
  add_header X-XSS-Protection "1; mode=block";

  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/nginx-access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  65;
  send_timeout 6000;
  proxy_read_timeout 6000;
  proxy_send_timeout 6000;
  proxy_connect_timeout 30;

  error_page 403 502 504 = @maintenance;

  gzip on;
  client_max_body_size 102400m;
  chunked_transfer_encoding on;
  proxy_buffering off;
  proxy_request_buffering off;
  server_names_hash_bucket_size 128;

  # return 403 for unknown hosts
  server {
    listen 80;
    server_name  "";
    location @maintenance {
      root /etc/nginx/error_pages;
      try_files /maintenance.html =403;
    }
    return 403;
  }
  # return 403 for unknown hosts
  server {
    listen 443;
    server_name  "";  
    location @maintenance {
      root /etc/nginx/error_pages;
      try_files /maintenance.html =403;
    }
    ssl_certificate  /etc/nginx/certs/$bare_host.crt;
    ssl_certificate_key /etc/nginx/certs/$bare_host.key;
    ssl_client_certificate /etc/nginx/certs/$bare_host.ca.crt;
 {% if ssl_cert_required is defined %}
   ssl_verify_client on;
 {% elif ssl_cert_optional is defined %}
   ssl_verify_client optional;
 {% endif %}
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

    chunked_transfer_encoding on;
    return 403;
  }

  # allow netdata on ip address
  server {
    listen 80;
    server_name {{ inventory_hostname }};
    location / {
      return 302 https://$http_host$request_uri;
    }
  }
  server {
    listen 443 ssl;
    server_name {{ inventory_hostname }};
    ssl_certificate  /etc/nginx/certs/$bare_host.crt;
    ssl_certificate_key /etc/nginx/certs/$bare_host.key;
    ssl_client_certificate /etc/nginx/certs/$bare_host.ca.crt;
    ssl_verify_client on;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    ssl_protocols TLSv1.2;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    chunked_transfer_encoding on;
    location / {
      proxy_pass http://dockerhost:19999;
    }
  }

  # include generated server configs
  include /etc/nginx/conf.d/*.conf;
}
